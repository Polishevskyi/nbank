name: Run tests

on:
  push:
    paths:
      - "src/**"
  workflow_dispatch:

jobs:
  run-tests:
    name: Set up services and run tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: "corretto"
          java-version: "21"

      - name: Install dependencies
        run: sudo apt-get update && sudo apt-get install -y jq bc

      - name: Cache Maven repository
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Set up services
        run: cd infra/docker_compose && bash restart_docker.sh && cd ../..

      - name: Run Checkstyle
        run: ./mvnw checkstyle:check

      - name: Run tests
        run: ./mvnw clean test -q
        env:
          APIBASEURL: http://localhost:4111
          UIBASEURL: http://frontend
          APIVERSION: /api/v1

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker image
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
        run: docker build -t "${DOCKER_USER,,}"/nbank:${{ github.sha }} .

      - name: Push Docker image
        env:
          DOCKER_USER: ${{ secrets.DOCKER_USERNAME }}
        run: docker push "${DOCKER_USER,,}"/nbank:${{ github.sha }}

      - name: Run Swagger coverage
        if: always()
        run: .swagger-coverage-commandline/bin/swagger-coverage-commandline -s http://localhost:4111/v3/api-docs -i target/swagger-coverage-output

      - name: Check API coverage quality gate
        if: always()
        run: ./check-api-coverage.sh

      - name: Integrate API coverage with Allure
        if: always()
        run: ./integrate-api-coverage.sh

      - name: Load test report history
        uses: actions/checkout@v2
        if: always()
        with:
          ref: gh-pages
          path: gh-pages

      - name: Build test report
        uses: simple-elf/allure-report-action@v1.7
        if: always()
        with:
          gh_pages: gh-pages
          allure_results: target/allure-results
          allure_history: allure-history

      - name: Build Swagger coverage report
        if: always()
        run: sudo cp swagger-coverage-report.html allure-history/${{ github.run_number }}

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            try {
              const data = JSON.parse(fs.readFileSync('swagger-coverage-results.json', 'utf8'));
              const coverage = ((data.conditionCounter.covered / data.conditionCounter.all) * 100).toFixed(1);
              const status = coverage >= 50 ? 'PASSED' : 'FAILED';
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `## API Coverage: ${coverage}% (${status})\n\nThreshold: 50%`
              });
            } catch (error) {
              console.log('Could not read coverage data:', error.message);
            }

      - name: Set coverage status
        if: always()
        run: |
          if [ -f "swagger-coverage-results.json" ]; then
            COVERAGE=$(jq -r '.conditionCounter.covered / .conditionCounter.all * 100' swagger-coverage-results.json | cut -d. -f1)
            if [ "$COVERAGE" -ge 50 ]; then
              echo "COVERAGE_STATUS=success" >> $GITHUB_ENV
            else
              echo "COVERAGE_STATUS=failure" >> $GITHUB_ENV
            fi
          fi

      - name: Publish test report
        uses: peaceiris/actions-gh-pages@v3
        if: always()
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: allure-history

      - name: Fail on low coverage
        if: env.COVERAGE_STATUS == 'failure'
        run: |
          echo "Build failed: API coverage below 50% threshold"
          exit 1

      - name: Clean up services
        if: always()
        run: cd infra/docker_compose && docker compose down
